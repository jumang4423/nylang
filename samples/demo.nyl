🍄🍄 ( "life game" ) ;

🍄🍄 ( "library import" ) ;
🐽🐽🐽 ( ".nylang/lib/__array__.nyl" ) ;
🐽🐽🐽 ( ".nylang/lib/__rand__.nyl" ) ;

🍄🍄 ( "make empty 2 dimentional array: arr" ) ;
🍙 make_array = 🏨 ( arr, size, value ) {
  🌸 (
    🏨 ( ) {
      🍙 array_of_array = [ ] ;
      🌸 (
        🏨 ( ) {
          array_of_array = 🥌 ( array_of_array, value ) ;
        },
        size
      ) ;

      arr = 🥌 ( arr, array_of_array ) ;
    },
    size
  ) ;

  🐶 ( 📏 ( arr ) != size ) {
    ❌ ( "array size is incorrect" ) ;
  }

  🍙 __test_ar_ar = arr [ 0 ] ;
  🐶 ( __test_ar_ar [ 0 ] != value ) {
    ❌ ( "expected value is incorrect" ) ;
  }
  💨 arr ;
} ;

🍄🍄 ( "put random value: arr" ) ;
🍙 put_random_value = 🏨 ( arr, times ) {
  🌸 (
    🏨 ( ) {
        🍙 i = __rand__random_num_zero_to_specified_number ( 📏 ( arr ) ) ;
        🍙 j = __rand__random_num_zero_to_specified_number ( 📏 ( arr ) ) ;
        arr = 🗿 ( arr, __rand__random_number ( ) % 2, i, j)
    },
    times
  ) ;

  💨 arr ;
} ;

🍙 remove_outline = 🏨 ( arr ) {
  🍙 arr_len = 📏 ( arr ) ;
  
  🍄🍄 ( "left" ) ;
  🍙 i = 0 ;
  🌸 (
    🏨 ( ) {
      arr = 🗿 ( arr, 👎, 0, i) ;
      i = i + 1 ;
    },
    arr_len
  ) ;

  🍄🍄 ( "top" ) ;
  🍙 i = 0 ;
  🌸 (
    🏨 ( ) {
      arr = 🗿 ( arr, 👎, i, 0) ;
      i = i + 1 ;
    },
    arr_len
  ) ;

  🍄🍄 ( "right" ) ;
  🍙 i = 0 ;
  🌸 (
    🏨 ( ) {
      arr = 🗿 ( arr, 👎, arr_len - 1, i) ;
      i = i + 1 ;
    },
    arr_len
  ) ;

  🍄🍄 ( "bottom" ) ;
  🍙 i = 0 ;
  🌸 (
    🏨 ( ) {
      arr = 🗿 ( arr, 👎, i, arr_len - 1) ;
      i = i + 1 ;
    },
    arr_len
  ) ;

  💨 arr ;
}

🍄🍄 ( "literally display array: str" ) ;
🍙 display_array = 🏨 ( arr ) {
  🍙 i = 0 ; 🍙 j = 0 ;
  🍙 arr_len = 📏 ( arr ) ;
  🍙 str = "\n->\n\n" ;

  🌸 (
    🏨 ( ) {
      🍙 j = 0 ; 
      🌸 (
        🏨 ( ) {
          🍙 _ar = arr [ j ] ;
          🐶 ( _ar [ i ] ) {
            str = 🥌 ( str, "💖 " ) ;
          } 😱 {
            str = 🥌 ( str, "　 " ) ;
          } ;
          j = j + 1 ;
        },
        arr_len
      ) ;
      🍙 str = 🥌 ( str, "\n" ) ;
      i = i + 1 ;
    },
    arr_len
  ) ;

  🍙 str = 🥌 ( str, "\n<-\n\n" ) ;

  💨 str ;
} ;

🍄🍄 ( "next chunk: array" ) ;
🍙 next_chunk = 🏨 ( arr ) {
  🍙 n_c_array = arr ;
  🍙 arr_len = 📏 ( arr ) ;
  🍙 i = 1 ; 🍙 j = 1 ;

  🌸 (
    🏨 ( ) {
      j = 1 ;
      🌸 (
        🏨 ( ) {

          🍙 cell_cnt_alive = 0 ;
          🐶 ( __array__get_two_dimention ( arr, i - 1, j - 1 ) ) {
            cell_cnt_alive = cell_cnt_alive + 1 ;
          } ;
          🐶 ( __array__get_two_dimention ( arr, i - 1, j ) ) {
            cell_cnt_alive = cell_cnt_alive + 1 ;
          } ;
          🐶 ( __array__get_two_dimention ( arr, i - 1, j + 1 ) ) {
            cell_cnt_alive = cell_cnt_alive + 1 ;
          } ;
          🐶 ( __array__get_two_dimention ( arr, i, j + 1 ) ) {
            cell_cnt_alive = cell_cnt_alive + 1 ;
          } ;
          🐶 ( __array__get_two_dimention ( arr, i + 1, j + 1 ) ) {
            cell_cnt_alive = cell_cnt_alive + 1 ;
          } ;
          🐶 ( __array__get_two_dimention ( arr, i + 1, j ) ) {
            cell_cnt_alive = cell_cnt_alive + 1 ;
          } ;
          🐶 ( __array__get_two_dimention ( arr, i + 1, j - 1 ) ) {
            cell_cnt_alive = cell_cnt_alive + 1 ;
          } ;
          🐶 ( __array__get_two_dimention ( arr, i, j - 1 ) ) {
            cell_cnt_alive = cell_cnt_alive + 1 ;
          } ;

          🍙 dead_flag = 👎 ;

          🐶 ( __array__get_two_dimention ( arr, i, j ) == 👎 ) {
            🍄🍄 ( "white" ) ;
            🐶 ( cell_cnt_alive == 3 ) {
              🍙 n_c_array = 🗿 ( n_c_array, 👍, i, j) ;
            } 😱 {
              🍙 dead_flag = 👍 ;
            } ;
          } 😱 {
            🍄🍄 ( "black" ) ;
            🐶 ( cell_cnt_alive == 2 || cell_cnt_alive == 3 ) { 
              🍙 n_c_array = 🗿 ( n_c_array, 👍, i, j ) ;
            } 😱 {
              🍙 dead_flag = 👍 ;
            } ;
          } ;

          🐶 ( dead_flag ) {
            🍙 n_c_array = 🗿 ( n_c_array, 👎, i, j ) ;
          } ;

          🍙 j = j + 1 ;
          💨 j != arr_len - 1 ;
        }
      ) ;
      🍙 i = i + 1 ;
      💨 i != arr_len - 1 ;
    }
  ) ;

  💨 n_c_array ;
}

🍙 main = 🏨 ( ) {

  🥚 ( ) ;

  🎤 ( "\n-! life game demo", 0, 255, 0, 👍) ;
  🎤🎶 ( "\n-! array size? ( 0 < number < 50 )", 0, 255, 0, 👎) 
  🍙 array_size = 👀 ( "number" ) ;

  🐶 ( array_size < 1 ) {
    ❌ ( "array size must be greater than 1" ) ;
  }
  🐶 ( array_size > 49 ) {
    ❌ ( "array size must be less than 50" ) ;
  }

  🎤🎶 ( "-! preparing array...", 255, 0, 0, 👎 ) ;
  🍙 array = put_random_value ( make_array ( [ ], array_size, 👎 ), array_size * array_size ) ;
  🍙 array = remove_outline ( array ) ;
  🍙 chunk_num = 0 ;

  🥚 ( ) ;

  🌸 (
    🏨 ( ) {
      🎤🎶 ( display_array ( array ) ) ;

      🎤 ( " -! life chunk: ", 0, 255, 0, 👎 ) ;
      🎤🎶 ( chunk_num, 0, 255, 0, 👎 ) ;
      🍙 array = next_chunk ( array ) ;
      🍙 chunk_num = chunk_num + 1 ;
      🥚 ( ) ;
      💨 👍 ;
    }
  ) ;
} ;