🍄🍄 ( 
  "array operations library!"
) ;

🍄🍄 ( "since 2 dimention value access is not defined yet" ) ;
🍙 __array__get_two_dimention = 🏨 ( array, i, j ) {
  🍙 arr_arr = array [ i ] ;
  💨 arr_arr [ j ] ;
} ;

🍄🍄 ( "do for each for array" ) ;
🍙 __array__forEach = 🏨 ( array, closure ) {

  🐶 ( 👽 array != [] ) {
    ❌ ( "__array__map__allc_array: first argument must be a array" ) ;
  }

  🍙 cur_index = 0 ;
  🌸 (
      🏨 () {
          closure ( array [ cur_index ], cur_index ) ;
          🍙 cur_index = cur_index + 1 ;
      },
      📏 ( array ) 
  ) ;
} ;

🍄🍄 ( "do map for array" ) ;
🍙 __array__map = 🏨 ( array, closure ) {

  🐶 ( 👽 array != [] ) {
    ❌ ( "__array__map__allc_array: first argument must be a array" ) ;
  }

  🍙 cur_index = 0 ;
  🌸 (
      🏨 () {
          array = 🗿 ( array, closure ( array [ cur_index ], cur_index ), cur_index ) ;
          cur_index = cur_index + 1 ;
      },
      📏 ( array ) 
  ) ;

  💨 array ;
} ;

🍄🍄 ( "make empty 2 dimentional array: arr" ) ;
🍙 __array__map__allc_array = 🏨 ( arr, size, value ) {
  🌸 (
    🏨 ( ) {
      🍙 array_of_array = [ ] ;
      🌸 (
        🏨 ( ) {
          array_of_array = 🥌 ( array_of_array, value ) ;
        },
        size
      ) ;

      arr = 🥌 ( arr, array_of_array ) ;
    },
    size
  ) ;

  🐶 ( 📏 ( arr ) != size ) {
    ❌ ( "__array__map__allc_array: array size is incorrect" ) ;
  }

  🍙 __test_ar_ar = arr [ 0 ] ;
  🐶 ( __test_ar_ar [ 0 ] != value ) {
    ❌ ( "__array__map__allc_array: expected value is incorrect" ) ;
  }
  💨 arr ;
} ;

🍄🍄 ( "sort number pair of array" ) ;
🍙 __array__sort = 🏨 ( array ) {

  🐶 ( 👽 array != [] ) { 
    ❌ ( "__array__sort: give me array" ) ;
  }
  🐶 ( 📏 ( array ) < 1 ) { 
    ❌ ( "__array__sort: array size is too small" ) ;
  }
  
  🍙 i = 0 ;
  🍙 j = 0 ;
  🌸 (
      🏨 () {
          j = i + 1 ;
          🌸 (
              🏨 () {
                  🐶 (array [ i ] > array[ j ] ) {
			                🍙 tmp = array [ i ] ;
                      array = 🗿 ( array, array [ j ], i ) ;
                      array = 🗿 ( array, tmp, j ) ;
		              }
                  🍙 j = j + 1 ;
              },
              📏 ( array ) - i - 1
          ) ;
          🍙 i = i + 1 ;
      },
      📏 ( array ) - 1
  ) ;
  💨 array ;
}